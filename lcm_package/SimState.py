"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class SimState(object):
    __slots__ = ["timestamp", "num_ranges", "joint_position", "joint_velocity", "joint_torque", "base_link_position", "base_link_linear_velocity", "base_link_quaternion", "base_link_angular_velocity", "imu_link_position", "imu_link_linear_velocity", "imu_link_quaternion", "imu_link_angular_velocity", "imu_sensor_quaternion", "imu_sensor_linear_acceleration", "imu_sensor_angular_velocity", "num_contact_ranges", "contact_force"]

    __typenames__ = ["double", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "int32_t", "double"]

    __dimensions__ = [None, None, ["num_ranges"], ["num_ranges"], ["num_ranges"], [3], [3], [4], [3], [3], [3], [4], [3], [4], [3], [3], None, ["num_contact_ranges"]]

    def __init__(self):
        self.timestamp = 0.0
        self.num_ranges = 0
        self.joint_position = []
        self.joint_velocity = []
        self.joint_torque = []
        self.base_link_position = [ 0.0 for dim0 in range(3) ]
        self.base_link_linear_velocity = [ 0.0 for dim0 in range(3) ]
        self.base_link_quaternion = [ 0.0 for dim0 in range(4) ]
        self.base_link_angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.imu_link_position = [ 0.0 for dim0 in range(3) ]
        self.imu_link_linear_velocity = [ 0.0 for dim0 in range(3) ]
        self.imu_link_quaternion = [ 0.0 for dim0 in range(4) ]
        self.imu_link_angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.imu_sensor_quaternion = [ 0.0 for dim0 in range(4) ]
        self.imu_sensor_linear_acceleration = [ 0.0 for dim0 in range(3) ]
        self.imu_sensor_angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.num_contact_ranges = 0
        self.contact_force = []

    def encode(self):
        buf = BytesIO()
        buf.write(SimState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">di", self.timestamp, self.num_ranges))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_position[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_velocity[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_torque[:self.num_ranges]))
        buf.write(struct.pack('>3d', *self.base_link_position[:3]))
        buf.write(struct.pack('>3d', *self.base_link_linear_velocity[:3]))
        buf.write(struct.pack('>4d', *self.base_link_quaternion[:4]))
        buf.write(struct.pack('>3d', *self.base_link_angular_velocity[:3]))
        buf.write(struct.pack('>3d', *self.imu_link_position[:3]))
        buf.write(struct.pack('>3d', *self.imu_link_linear_velocity[:3]))
        buf.write(struct.pack('>4d', *self.imu_link_quaternion[:4]))
        buf.write(struct.pack('>3d', *self.imu_link_angular_velocity[:3]))
        buf.write(struct.pack('>4d', *self.imu_sensor_quaternion[:4]))
        buf.write(struct.pack('>3d', *self.imu_sensor_linear_acceleration[:3]))
        buf.write(struct.pack('>3d', *self.imu_sensor_angular_velocity[:3]))
        buf.write(struct.pack(">i", self.num_contact_ranges))
        buf.write(struct.pack('>%dd' % self.num_contact_ranges, *self.contact_force[:self.num_contact_ranges]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SimState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SimState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SimState()
        self.timestamp, self.num_ranges = struct.unpack(">di", buf.read(12))
        self.joint_position = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_velocity = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_torque = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.base_link_position = struct.unpack('>3d', buf.read(24))
        self.base_link_linear_velocity = struct.unpack('>3d', buf.read(24))
        self.base_link_quaternion = struct.unpack('>4d', buf.read(32))
        self.base_link_angular_velocity = struct.unpack('>3d', buf.read(24))
        self.imu_link_position = struct.unpack('>3d', buf.read(24))
        self.imu_link_linear_velocity = struct.unpack('>3d', buf.read(24))
        self.imu_link_quaternion = struct.unpack('>4d', buf.read(32))
        self.imu_link_angular_velocity = struct.unpack('>3d', buf.read(24))
        self.imu_sensor_quaternion = struct.unpack('>4d', buf.read(32))
        self.imu_sensor_linear_acceleration = struct.unpack('>3d', buf.read(24))
        self.imu_sensor_angular_velocity = struct.unpack('>3d', buf.read(24))
        self.num_contact_ranges = struct.unpack(">i", buf.read(4))[0]
        self.contact_force = struct.unpack('>%dd' % self.num_contact_ranges, buf.read(self.num_contact_ranges * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SimState in parents: return 0
        tmphash = (0x56da9e44f01af82e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SimState._packed_fingerprint is None:
            SimState._packed_fingerprint = struct.pack(">Q", SimState._get_hash_recursive([]))
        return SimState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SimState._get_packed_fingerprint())[0]

