"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class SimCommand(object):
    __slots__ = ["timestamp", "num_ranges", "joint_position", "joint_velocity", "joint_feed_forward_torque", "joint_stiffness", "joint_damping"]

    __typenames__ = ["double", "int32_t", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, ["num_ranges"], ["num_ranges"], ["num_ranges"], ["num_ranges"], ["num_ranges"]]

    def __init__(self):
        self.timestamp = 0.0
        self.num_ranges = 0
        self.joint_position = []
        self.joint_velocity = []
        self.joint_feed_forward_torque = []
        self.joint_stiffness = []
        self.joint_damping = []

    def encode(self):
        buf = BytesIO()
        buf.write(SimCommand._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">di", self.timestamp, self.num_ranges))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_position[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_velocity[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_feed_forward_torque[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_stiffness[:self.num_ranges]))
        buf.write(struct.pack('>%dd' % self.num_ranges, *self.joint_damping[:self.num_ranges]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SimCommand._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SimCommand._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SimCommand()
        self.timestamp, self.num_ranges = struct.unpack(">di", buf.read(12))
        self.joint_position = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_velocity = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_feed_forward_torque = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_stiffness = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        self.joint_damping = struct.unpack('>%dd' % self.num_ranges, buf.read(self.num_ranges * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SimCommand in parents: return 0
        tmphash = (0xef15c882f7b7054a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SimCommand._packed_fingerprint is None:
            SimCommand._packed_fingerprint = struct.pack(">Q", SimCommand._get_hash_recursive([]))
        return SimCommand._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SimCommand._get_packed_fingerprint())[0]

